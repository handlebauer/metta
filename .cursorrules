# Project Summary

AutoCRM is an AI-powered Customer Relationship Management system designed to minimize manual support workload by leveraging generative AI to handle customer interactions and support tickets. The system integrates existing help resources with LLM capabilities to deliver an interactive support experience, featuring a comprehensive ticket management system, employee interfaces, administrative controls, and customer-facing features like self-service tools and multi-channel support.

# Rules for Next.js 15 Development

1. Use bun for all package management and build tasks.
2. Implement the App Router, which is the recommended routing system for Next.js 14.
3. Utilize Server Components by default.
4. Use Client Components only when necessary for interactivity or client-side state.
5. Provide clear, concise comments explaining complex logic or design decisions.

## Project Structure

1. Use the `src` directory as the root for all application code:
   - `app/` - Next.js app router pages and layouts
   - `actions/` - Server actions organized by feature
   - `auth/` - Authentication related code
   - `components/` - UI components (ui/ for shadcn, feature/ for others)
   - `hooks/` - Custom React hooks
   - `lib/` - Shared utilities, schemas, and configurations
   - `services/` - Database operations by feature

2. File naming conventions:
   - Client Components: `*.client.tsx`
   - Server Components: `*.tsx` (default)
   - Use feature-based organization within directories

3. External directories:
   - `supabase/` - Database migrations and configuration
   - `tests/` - E2E tests
   - `scripts/` - Build and database scripts

## Next.js Code Style

1. Define components using the function keyword with TypeScript:
    ```tsx
    interface ComponentProps {
      // Props definition
    }

    export function Component({ prop1, prop2 }: ComponentProps) {
      // Component logic
    }
    ```

## Next.js Routing and Navigation

1. Implement nested routing using folder structure in the `app` directory.
2. Use the `<Link>` component from `next/link` for client-side navigation:
    ```tsx
    import Link from 'next/link';

    <Link href="/about">About</Link>
    ```
3. Implement dynamic routes using folder names with square brackets (e.g., `[id]`).

## Next.js Styling and Theming

1. Use Tailwind CSS for styling.
2. Create custom Tailwind classes in the `tailwind.config.js` file for reusable styles.
3. When using `clsx` for conditional class names, keep performance in mind.
    ```typescript
    const className = useMemo(() => clsx('base-class', {
        'conditional-class': condition,
    }), [condition]);

    // ✅ GOOD:
    return <div className={className}>...</div>;

    // ❌ BAD:
    return <div className={clsx('base-class', {
        'conditional-class': condition,
    })}>...</div>;
    ```

## Next.js Performance

1. Use `useMemo` for expensive calculations.
2. Use `useCallback` for expensive functions.
3. Implement parallel data fetching using `Promise.all`.

# Composer Mode

1. When using Composer mode, provide clear, natural language descriptions of desired changes or additions.
2. For multi-file operations, specify the files involved and their relationships.
3. When requesting code generation, provide context about the desired functionality and how it fits into the existing project structure.
4. For refactoring tasks, describe the current code structure and the desired outcome.
5. When addressing errors, provide details about the error message and the surrounding code context.
