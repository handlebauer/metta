# Project Summary

Metta is an AI-powered Customer Relationship Management system designed to minimize manual support workload by leveraging generative AI to handle customer interactions and support tickets. The system integrates existing help resources with LLM capabilities to deliver an interactive support experience, featuring a comprehensive ticket management system, employee interfaces, administrative controls, and customer-facing features like self-service tools and multi-channel support.

# Rules for Next.js 15 Development

1. Use bun for all package management and build tasks.
2. Implement the App Router, which is the recommended routing system for Next.js 14.
3. Utilize Server Components by default.
4. Use Client Components only when necessary for interactivity or client-side state.
5. Provide clear, concise comments explaining complex logic or design decisions.
6. Never create new interfaces or types without first checking the `@/lib/schemas` directory.

## Project Structure

1. Use the `src` directory as the root for all application code:

    - `app/` - Next.js app router pages and layouts
    - `actions/` - Server actions organized by feature
    - `auth/` - Authentication related code
    - `components/` - UI components (ui/ for shadcn, feature/ for others)
    - `hooks/` - Custom React hooks
    - `lib/` - Shared utilities, schemas, and configurations
    - `services/` - Database operations by feature

2. File naming conventions:

    - Client Components: `*.client.tsx`
    - Server Components: `*.tsx` (default)
    - Use feature-based organization within directories

3. External directories:
    - `supabase/` - Database migrations and configuration
    - `tests/` - E2E tests
    - `scripts/` - Build and database scripts

## Database

1. After any migration file is changed/added, run `bun run supabase:init:local` to migrate and generate types.
2. If there is a mismatch between our schema and the generated types, you must run `bun run supabase:init:local`
3. Please use the `gen_ulid()` function to generate UUIDs for new records.

## Package Commands

2. `bun run supabase:init:local` - Reset local DB, generate types, and seed data
3. `bun run shadcn:add <component>` - Add a new shadcn/ui component
4. `bun run test` - Run E2E tests with Playwright

## UI

1. Check for shadcn/ui components in the `components/ui` directory
2. As necessary, add shadcn components with `bun run shadcn:add <component-name>`
3. When creating a new component, check for related types in the `lib/schemas` directory
4. Keep UI logic in the function body and pass the values into the render body

```tsx
function Component(props: ComponentProps) {
    // ✅ GOOD: Compute the value in the function body
    const initials = useMemo(
        () => props.name.split(' ').map(upperCase),
        [props.name],
    )

    return <div>{initials}</div>
}

function Component(props: ComponentProps) {
    // ❌ BAD: Compute the value in the render body
    return <div>{props.name.split(' ').map(upperCase)}</div>
}
```

## Next.js Code Style

1. Define components using the function keyword with TypeScript:

    ```tsx
    interface ComponentProps {
        // Props definition
    }

    export function Component({ prop1, prop2 }: ComponentProps) {
        // Component logic
    }
    ```

## Next.js Routing and Navigation

1. Implement nested routing using folder structure in the `app` directory.
2. Use the `<Link>` component from `next/link` for client-side navigation:

    ```tsx
    import Link from 'next/link'

    ;<Link href="/about">About</Link>
    ```

3. Implement dynamic routes using folder names with square brackets (e.g., `[id]`).

## Next.js Styling and Theming

1. Use Tailwind CSS for styling.
2. Create custom Tailwind classes in the `tailwind.config.js` file for reusable styles.
3. When using `clsx` for conditional class names, keep performance in mind.

    ```typescript
    const className = useMemo(() => clsx('base-class', {
        'conditional-class': condition,
    }), [condition]);

    // ✅ GOOD:
    return <div className={className}>...</div>;

    // ❌ BAD:
    return <div className={clsx('base-class', {
        'conditional-class': condition,
    })}>...</div>;
    ```

## Next.js Performance

1. Use `useMemo` for expensive calculations.
2. Use `useCallback` for expensive functions.
3. Implement parallel data fetching using `Promise.all`.

## Next.js Miscellaneous

```tsx
// ❌ Don't define params as a plain object since they are resolved asynchronously
// interface TokenAccessPageProps {
//     params: {
//         id: string
//         token: string
//     }
// }

// ✅ Define params as a Promise since they are resolved asynchronously
interface TokenAccessPageProps {
    params: Promise<{
        id: string
        token: string
    }>
}
```

# Composer Mode

1. When using Composer mode, provide clear, natural language descriptions of desired changes or additions.
2. For multi-file operations, specify the files involved and their relationships.
3. When requesting code generation, provide context about the desired functionality and how it fits into the existing project structure.
4. For refactoring tasks, describe the current code structure and the desired outcome.
5. When addressing errors, provide details about the error message and the surrounding code context.
